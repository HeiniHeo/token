session에 가지고 있는 정보를 옮길 수 있는 것이 token 그리고 그 token을 browser에게
저장을 시킨다.

보안문제
=> 데이터들을 암호화시켜서 token으로 보낸다. 
서버에서 전송받은 token을 client browser에 저장하고 필요할때마다 불러옴



1. client가 server에게 ID 와 PW를 보낸다.(요청)
2. server가 ID,PW를 DB에서 조회 후 결과가 맞으면 token을 생성함. (암호화를 거쳐서 생성함)
3. server가 생성한 token을 client에게 보내줌(응답)
4. client가 token을 cookie에 저장한다.(대부분)
5. 4번까지 완료한 후 client는 매 요청마다 token을 보낸다.

token = jwt.jo


<token>
header => 이 토큰의 정보
1. header 암호화
2진법, 10진법, 16진법

binary data

이미지도 텍스토로 이루어져있는데 여기서 텍스트라 바이너리 형식이다.

비트숫자가 같기 때문에 표현하기 쉬워서 BIT

15라는 숫자를...
2진수로 표현하면 1111   == > 숫자가 4개여서 4bit
16진수로 표현하면 F

16진수 => 1~9,a~f
10진수 => 1~10
2진수 => 0과 1
8진수 => 1~8

진수로 변환하려면 string으로 값을 받아야함

암호화 라이브러리 => crypto



비구조 할당문 쓸때 let이나 const같은 변수 선언문이 필요함
아니면 ()안에 할당문 넣으면 됨



res.send 나 res.render는 결국 응답메세지를 완성시켜서 보내주는 역할을 한다.
res.cookie()는 응답메시지에서 header 부분에 쿠키를 생성해서 주겠다는 소리

서버가 뭘 요청 할때마다 storage에서 정보를 가지고 와서 요청한다.
그래서 페이지가 옮겨가고 계속 쿠키값이 남아있을 수 있는 것.




요청에서 get을 쓰면 그 안에 있는 속성값에 접근할 수 있게 된다.
JSON.parser() => 스트링을 객체형태로 되돌리는 메서드